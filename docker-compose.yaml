services:
  backend:
    image: dimagin/sonar-back:latest
    container_name: sonar-back
    user: '${UID}:${GID}'
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sonar-network
      - traefik-network
    labels:
      - "traefik.enable=true"
      # HTTP router (for redirect)
      - "traefik.http.routers.sonar-back.entrypoints=web"
      - "traefik.http.routers.sonar-back.rule=Host(`${SONAR_BACKEND_HOST}`)"
      - "traefik.http.routers.sonar-back.middlewares=https-redirect"
      # HTTPS router
      - "traefik.http.routers.sonar-back-secure.entrypoints=websecure"
      - "traefik.http.routers.sonar-back-secure.rule=Host(`${SONAR_BACKEND_HOST}`)"
      - "traefik.http.routers.sonar-back-secure.tls=true"
      - "traefik.http.routers.sonar-back-secure.tls.certresolver=letsencrypt"
      # Service configuration
      - "traefik.http.services.sonar-back.loadbalancer.server.port=3000"
      # Use common middleware for HTTPS redirect
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
  db:
    image: postgres:latest
    container_name: sonar-db
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - sonar-db-data:/var/lib/postgresql/data:rw
    networks:
      - sonar-network
    env_file:
      - .env
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '--host=localhost',
          '--username=${POSTGRES_USER}',
          '--dbname=${POSTGRES_DB}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

networks:
  traefik-network:
    external: true
  sonar-network:
    driver: bridge

volumes:
  sonar-db-data:
