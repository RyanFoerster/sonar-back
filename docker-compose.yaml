services:
  backend:
    image: dimagin/sonar-back:latest
    container_name: sonar-back
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sonar-network
      - traefik-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonar-back.entrypoints=websecure
      - traefik.http.routers.sonar-back.tls=true
      - traefik.http.routers.sonar-back.rule=Host(`backend.sonarartists.be`)
      - traefik.http.routers.sonar-back.service=sonar-back
      - traefik.http.services.sonar-back.loadbalancer.server.port=3000
      - traefik.http.routers.sonar-back.service=api@internal

  db:
    image: postgres:latest
    container_name: sonar-db
    restart: unless-stopped
    volumes:
      - sonar-db-data:/var/lib/postgresql/data:rw
    networks:
      - sonar-network
      - traefik-network
    env_file:
      - .env
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '--host=localhost',
          '--username=${POSTGRES_USER}',
          '--dbname=${POSTGRES_DB}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonar-db.entrypoints=websecure
      - traefik.http.routers.sonar-db.tls=true
      - traefik.http.routers.sonar-db.rule=Host(`database.sonarartists.be`)
      - traefik.http.services.sonar-db.loadbalancer.server.port=5432
      - traefik.http.routers.sonar-db.service=api@internal

networks:
  sonar-network:
    driver: bridge
  traefik-network:
    external: true

volumes:
  sonar-db-data:
