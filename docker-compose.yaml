version: '3.8'

services:
  backend:
    image: dimagin/sonar-back:latest
    container_name: sonar-back
    user: '${UID}:${GID}'
    restart: unless-stopped
    ports:
      - ${SONAR_PORT}:3000
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sonar-network # This is the network that the backend service will be connected to

  db:
    image: postgres:latest
    container_name: sonar-db
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - sonar-db-data:/var/lib/postgresql/data:rw
    networks:
      - sonar-network
    env_file:
      - .env
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '--host=localhost',
          '--username=${POSTGRES_USER}',
          '--dbname=${POSTGRES_DB}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - '6379:6379'
    volumes:
      - ./data/redis:/data
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - '5050:80'
    volumes:
      - ./data/pgadmin:/root/.pgadmin
    env_file:
      - .env
    networks:
      - postgres

networks:
  sonar-network:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  sonar-db-data:
  redis:
  pgadmin:
